{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/theGoodParts/7/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"f6029057-a349-566e-a3db-20e3f77bca03","excerpt":"…","html":"<h3>배열</h3>\n<p>배열은 해당 항목의 오프셋을 계산할 수 있는 정수를 통해\n각 항목들을 접근할 수 있는 연속적인 메모리 할당입니다. </p>\n<p>자바스크립트에서는 이런 류의 배열은 없습니다.\n대신 배열 같은 특성을 지닌 객체를 제공합니다. </p>\n<p>배열은 자신만의 리터럴과 유용한 내장 메소드들이 있습니다. </p>\n<h3>length 속성</h3>\n<p>배열에는 단순 객체와 달리 length라는 속성이 있습니다.\n배열의 가장 큰 정수 속성 이름보다도 하나 더 큰 값입니다.\n(배열 내부 원소의 갯수와 일치하는 것은 아닙니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 배열의 끝에 원소를 추가할 수 있습니다. </span>\nnumbers<span class=\"token punctuation\">[</span>numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> \nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<h3>삭제</h3>\n<p>배열의 원소를 삭제할 때 단순히 delete를 사용한다면,\n배열에 빈 구멍이 생기게 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">numbers<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ( 배열의 시작점, 삭제할 요소의 수 , ... (삭제한 지점에 추가되는 요소))</span></code></pre></div>\n<h3>열거</h3>\n<p>for in 문을 사용하지 말것\n(다른 요소들이 열거될 수 있고, 열거되는 순서를 보장하지 않음)</p>\n<h3>객체와 배열의 혼동</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">is_array</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> \n            <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> \n            <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>splice <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> \n            <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 활용하면\n다름 프레임이나 다른 창의 값도 배열인지 아닌지 확인 할 수 있다. </p>","frontmatter":{"title":"6 - 배열","date":null,"description":null}}},"pageContext":{"slug":"/JS/theGoodParts/7/","previous":{"fields":{"slug":"/JS/theGoodParts/6/"},"frontmatter":{"title":"5 - 상속"}},"next":{"fields":{"slug":"/FP/FPinJS/8/"},"frontmatter":{"title":"CHAPTER 8 - 비동기 이벤트와 데이터를 관리"}}}}}