{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/theGoodParts/6/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"a1c17aeb-dbed-598f-92db-8d99fce2b783","excerpt":"…","html":"<h3>상속</h3>\n<p>코드 상속은 두가지 유용한 점을 제공합니다. </p>\n<p>첫째로는 코드 재사용의 한 형태입니다.\n둘째로는 상속에 데이터 타입 체계의 명세가 포함된다는 것입니다. </p>\n<p>자바스크립트는 캐스팅을 절대 하지 않습니다.\n객체에서 중요한 점은 어떤 일을 하느냐지 어디서 유래했느냐가 아닙니다. </p>\n<p>자바스크립트는 프로토타입 기반 언어인데 이 말은 즉 객체가 다른 객체로\n바로 상속된다는 말입니다. </p>\n<h3>의사 클래스 방식 (pseudoclassical)</h3>\n<p>자바스크립트는 자신의 프로토타입 본질과 모순되는 점이 있습니다.\n자바스크립트의 프로토타입 매커니즘은 클래스와 비슷하게 보이는 일부 복잡한 구문들 때문에 명확히 두드러지질 않습니다. </p>\n<p>프로토타입적 본성에 맞게 객체에서 다른 객체로 직접 상속하는 방법을 갖는 대신에\n생성자 함수를 통해 객체를 생성하는 것과 같은 불필요한 간접적인 단계가 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> constructor <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 함수 객체가 만들어질 때, 함수 생성자가 실행하는 코드 </span>\n<span class=\"token comment\">// 중요한 것은 prototype 객체 자체입니다.  </span>\n\n<span class=\"token comment\">// 만약에 new 연산자가 메소드였다면 다음과 같은 코드였을 것 //</span>\n\nFunction<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 생성자의 프로토타입을 상속받는 새로운 객체 생성 </span>\n\n    <span class=\"token keyword\">var</span> other <span class=\"token operator\">=</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// this를 새로운 객체에 바인딩하면서 생성자 호출</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> other <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> that<span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 반환값이 객체가 아니면, 새로운 객체로 대체 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>의사 클래스 방식 예시</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Mammal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Mammal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Mammal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">says</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Cat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">=</span> <span class=\"token string\">'meow'</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mammal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">purr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">var</span> i <span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                s <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            s <span class=\"token operator\">+=</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> myCat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Henrietta'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">var</span> says <span class=\"token operator\">=</span> myCat<span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">var</span> purr <span class=\"token operator\">=</span> myCat<span class=\"token punctuation\">.</span><span class=\"token function\">purr</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> myCat<span class=\"token punctuation\">.</span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n\n    <span class=\"token comment\">// 만약 inherits 메소드를 다음과 같이 정의해서 </span>\n    <span class=\"token comment\">// 이상한 코드의 일부분을 숨길 수 있습니다. </span>\n\n    Function<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inherits'</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>생성자의 경우 대문자로 시작하는 관습이 있다.\n(설계상 다른 함수랑 차이가 없다.)</p>\n<p>클래스 계층의 복잡함 대부분은 정적 타입 확인이라는 제약사항으로\n인해 발생합니다. </p>\n<p>자바스크립트는 이러한 제약사항으로부터 완전히 자유롭습니다. </p>\n<p>클래스 기반의 언어에서는 클래스 상속이 코드를 재사용할 수 있ㄴ느\n유일한 해법이지만 자바스크립트는 더 좋은 방법이 있습니다. </p>\n<h3>02 객체를 기술하는 객체</h3>\n<p>생성자가 매우 많은 매개변수를 받을 경우,\n객체를 기술하는 하나의 객체를 받도록 정의하면 보다 사용하기 편리한\n형태가 됩니다. </p>\n<h3>프로토타입 방식</h3>\n<p>순수하게 프로토타입에 기반한 패턴에서는 클래스가 필요없습니다.\n대신에 객체에만 초점을 맞추면 됩니다. </p>\n<p>새로운 객체는 기존의 객체의 속성을 상속받을 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myMammal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Herb the Mammal'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">get_name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">says</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myCat <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>myMammal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nmyCat<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Henrietta'</span><span class=\"token punctuation\">;</span> \nmyCat<span class=\"token punctuation\">.</span>saying <span class=\"token operator\">=</span> <span class=\"token string\">'meow'</span><span class=\"token punctuation\">;</span> \nmyCat<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">purr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ....</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>새로운 객체를 맞춤화 함으로써 기반이 되는 객체와 차이점을 만들 수 있습니다.\n이러한 방법은 기존의 데이터구조를 상속받는 데이터구조에 유용합니다. </p>\n<p>특정 유효범위에서 정의된 항목은 바깥의 유효범위에서 볼 수 없어야 합니다.\n내부의 유효범위는 바깥의 유효범위를 상속받는다고 볼 수 있다.\n자바스크립트의 객체는 이러한 관계를 나타내는데 매우 적합합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">block</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> oldScope <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">;</span> \n    scope <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token function\">advance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 오른쪽 중괄호를 지나 전진, 새로운 scope를 포기하고 이전 scope복원</span>\n    <span class=\"token function\">advance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    scope <span class=\"token operator\">=</span> oldScope<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>함수를 사용한 방식</h3>\n<p>앞서 본 module 패턴을 사용하여, private을 구현함\n함수는 4단계로 진행된다 </p>\n<ul>\n<li>\n<ol>\n<li>새로운 객체를 생성함 ( 객체 리터럴, 또는 생성자 호출, Object.create 등등..)</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>필요한 private변수와 메서드를 정의함 </li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>that에 새로운 객체를 할당하고 메소드를 추가함</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>새로운 객체 that을 반환함 </li>\n</ol>\n</li>\n</ul>\n<p> 이 함수의 의사 코드 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">constructor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">spec<span class=\"token punctuation\">,</span> my</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> that<span class=\"token punctuation\">,</span> 필요한 <span class=\"token keyword\">private</span> 변수들 \n    my <span class=\"token operator\">=</span> my <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n    공유할 변수와 함수를 my에 추가 \n\n    that <span class=\"token operator\">=</span> 새로운 객체 \n\n    앞서 정의한 변수들에 접근할 권한이 있는 메소드들을 that에 추가 \n\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>my 객체는 constructor끼리 내부에서 전달할 private변수들을 저장하고 있음\nmammal 예제를 살펴봄 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">mammal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">spec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> spec<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">says</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> spec<span class=\"token punctuation\">.</span>saying <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> myMammal <span class=\"token operator\">=</span> <span class=\"token function\">mammal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Herb'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">spec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    spec<span class=\"token punctuation\">.</span>saying <span class=\"token operator\">=</span> spec<span class=\"token punctuation\">.</span>saying <span class=\"token operator\">||</span> <span class=\"token string\">'meow'</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token function\">mammal</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">purr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n       <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myCat <span class=\"token operator\">=</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Henrietta'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>super 메소드를 다룰 수 있는 방법을 제공한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'superior'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> \n    method <span class=\"token operator\">=</span> that<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token function\">method</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coolcat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">spec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> that  <span class=\"token operator\">=</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        super_get_name <span class=\"token operator\">=</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">superior</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    \n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">n</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'like '</span> <span class=\"token operator\">+</span> <span class=\"token function\">super_get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' baby'</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myCoolCat <span class=\"token operator\">=</span> <span class=\"token function\">coolcat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Bix'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> myCoolCat<span class=\"token punctuation\">.</span><span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<h3>클래스 구성을 위한 부속품</h3>\n<p>객체를 구성할때에도 부속품을 가져다 조립하듯이 할 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">eventuality</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> registry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fire</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 객체에서 이벤트에 상응하는 처리기를 실행시킴</span>\n        <span class=\"token comment\">// 매개변수 event는 이벤트 이름을 포함하는 문자열이거나 </span>\n        <span class=\"token comment\">// 이벤트 이름을 갖고 있는 type속성을 가진 객체일 수 있음 </span>\n        <span class=\"token comment\">// on 메소드에 의해 등록되는 이벤트 이름과 같은 처리 함수가 호출됨 </span>\n\n        <span class=\"token keyword\">var</span> array<span class=\"token punctuation\">,</span> \n            func<span class=\"token punctuation\">,</span> \n            handler<span class=\"token punctuation\">,</span> \n            i<span class=\"token punctuation\">,</span> \n            type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> event <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> \n                   event <span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 해당 이벤트에 상응하는 처리 함수 목록 배열이 있으면 </span>\n        <span class=\"token comment\">// 루프를 돌면서 이 배열에 등록되 있는 모든 처리 함수를 실행시킴</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            array <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                hadler <span class=\"token operator\">=</span> array <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">// 처리 함수 배열에 속하는 항목 하나는</span>\n        <span class=\"token comment\">// 처리 함수인 method 와 parameters라는 배열로 구성됨 </span>\n        <span class=\"token comment\">// method가 함수 자체가 아니라 이름이면 this에서 해당 함수를 찾음 </span>\n         \n                func <span class=\"token operator\">=</span> hadler<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> func <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n                    func <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>func<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> \n                     handler<span class=\"token punctuation\">.</span>parameters <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 이벤트 등록, handler 항목을 만들고, 해당 이벤트 타입의 배열에 추가 </span>\n    <span class=\"token comment\">// 만약 기존에 배열이 없다면 해당 이벤트 타입에 대해 새로운 배열 생성 </span>\n\n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">on</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> parameters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\n        <span class=\"token keyword\">var</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n            method <span class=\"token operator\">:</span> method<span class=\"token punctuation\">,</span> \n            parameters <span class=\"token operator\">:</span> parameters<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            registry<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n            registry<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>handler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"5 - 상속","date":null,"description":null}}},"pageContext":{"slug":"/JS/theGoodParts/6/","previous":{"fields":{"slug":"/FP/FPinJS/6/"},"frontmatter":{"title":"CHAPTER 6 - 복잡성을 줄이는 디자인 패턴"}},"next":{"fields":{"slug":"/JS/theGoodParts/7/"},"frontmatter":{"title":"6 - 배열"}}}}}