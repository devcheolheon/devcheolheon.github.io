{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/theGoodParts/5/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"f23360e5-793f-5840-a3f6-65ced3a82e06","excerpt":"함수 자바스크립트에서 모듈화의 근간, \n함수는 코드의 재사용이나 정보의 구성 및 은닉 등에 사용하고, 객체의 행위를 지정하는데도 사용합니다.  일반적으로 프로그래밍 기술은 \n요구사항의 집합을 함수와 자료구조의 집합으로 변환하는 것입니다.…","html":"<h3>함수</h3>\n<p>자바스크립트에서 모듈화의 근간,\n함수는 코드의 재사용이나 정보의 구성 및 은닉 등에 사용하고, 객체의 행위를 지정하는데도 사용합니다. </p>\n<p>일반적으로 프로그래밍 기술은\n요구사항의 집합을 함수와 자료구조의 집합으로 변환하는 것입니다. </p>\n<h3>1  함수 객체</h3>\n<p>함수도 객체입니다. 그래서 프로토타입 객체로 숨겨진 연결을 갖습니다.\n또한 모든 함수는 숨겨져 있는 두 개의 추가적인 속성이 있는데\n이 속성은 함수의 문맥과 함수의 행위를 구현하는 코드 입니다. </p>\n<p>또한 모든 함수 객체는 prototype이라는 속성이 있습니다.\n이 속성의 값은 함수 자체를 값으로 갖는 constructor라는 속성이 있는\n객체입니다. </p>\n<h3>2 함수 리터럴</h3>\n<p>함수 객체는 함수 리터럴로 생성할 수 있습니다.\n함수 리터럴은 표현식이 나올 수 있는 곳이라면 어디든지 위치할 수 있습니다. </p>\n<p>함수는 함수 내부에서도 정의할 수 있습니다.\n내부 함수도 매개변수와 변수를 가질 수 있으며 자신을 포함하고 있는\n함수의 매개변수와 변수에도 접근할 수 있습니다. </p>\n<p>함수 리터럴로 생성한 함수 객체는 외부 문맥으로의 연결이 있는데\n이를 클로져라고 합니다. (클로져는 강력한 표현력의 근원입니다)</p>\n<h3>3 호출</h3>\n<p>함수는  명시되어 있는 매개변수에 대해서 this와 arguments라는\n추가적인 매개변수 두 개를 받게 됩니다. </p>\n<p>this라는 매개변수는 객체지향 프로그래밍 관점에서 매우 중요하며\n이 매개변수의 값은 호출하는 패턴에 의해 결정됩니다. </p>\n<p>자바스크립트에서 함수를 호출하는데\n/매소드 호출 패턴/함수 호출 패턴/생성자 호출 패턴/apply 호출 패턴\n이라는 네가지 패턴이 있습니다. </p>\n<p>명시되어 있는 매개변수와 호출시 넘겨준 인자의 갯수가 같지 않아도\n에러가 발생하지 않습니다. </p>\n<h4>메소드 호출 패턴</h4>\n<p>함수를 객체에 속성에 저장하는 경우 함수를 메소드라고 부릅니다.\n메소드를 호출할때 this는 메소드를 포함하고 있는 객체에 바인딩됩니다. </p>\n<h4>함수 호출 패턴</h4>\n<p>객체의 속성이 아닌 경우에는 함수로서 호출합니다.\n이 패턴으로 호출될때는 this는 전역 객체에 바인딩됩니다. </p>\n<p>이것은 언어의 설계단계의 실수,\n이로써 메소드가 내부 함수를 사용하여 자신의 작업을 돕지 못한다는 것 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// this를 that이라는 변수에 임시로 저장</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">helper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        that<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>생성자 호출 패턴</h4>\n<p>클래스를 사용하는 듯한 구문은 자바스크립트의 진정한 프로토타입적 속성을 애매하게 만들었습니다.\n어쨋건</p>\n<p>함수를 new라는 전치 연산자와 함께 호출하면 호출한 함수의 prototype 속성 값에\n연결되는(숨겨진) 링크를 갖는 객체가 생성되고 이 새로운 객체는 this에 바인딩 됩니다. </p>\n<h4>apply 호출 패턴</h4>\n<p>apply 메소드는 함수를 사용할 때 호출할 인수들의 배열을 받아들입니다.\n또한 이 메소드는 this의 값을 선택할 수 있도록 해줍니다. </p>\n<h3>인수 배열</h3>\n<p>함수를 호출할 때 추가적인 매개변수로  arguments 라는 배열을 사용할 수 있습니다.\n설계상의 문제로 arguments는 실제 배열은 아닙니다.\n( length라는 속성은 있지만 모든 배열이 가지는 메소드들은 없습니다. )</p>\n<h3>반환</h3>\n<p>return문 실행시 즉시 제어를 반환함\n함수는 항상 값을 반환하고 반환값이 지정되지 않을 경우 undefined가 반환된다.\nnew로 실행할 경우, 반환값이 객체가 아닌 경우 반환값은 this가 됩니다.(새로운 객체)</p>\n<h3>예외</h3>\n<p>throw문은 어떤 예외인지 알 수 있게 해주는 name 속성과 예외에 대해 설명하는 message 속성을 가진\n예외 객체를 반환해야 합니다. </p>\n<h3>기본 타입에 기능 추가</h3>\n<p>(( 다른 코딩 스타일 가이드들에서 권장하지 않는 것을 많이 봐왔음 ))</p>\n<p>예를 들어 숫자형에서 정수형으로 변환하는 메소드를 추가함</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   Number<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'integer'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n       <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'ceil'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'floor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또는 trim 메소드를 추가함 </p>\n<p>// es5에서 표준화된 기능\n// <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/Trim</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    String<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trim'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^\\s+|\\s+/g</span> <span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>method라는 함수도 이 책에서 기본 값을 확장해서 추가한 것임\n(위 코드 실행 전에 있었음)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>재귀적 호출</h3>\n<p>재귀적 호출은 어떤 문제가 유사한 하위 문제로 나뉘어지고 각각의 문제를 같은 해결 방법으로\n처리할 수 있을 때 사용할 수 있는 강력한 프로그래밍 기법입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hanoi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">disc<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">,</span> dst</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>disc <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>disc<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'move disc '</span> <span class=\"token operator\">+</span> disc <span class=\"token operator\">+</span> <span class=\"token string\">' from '</span> <span class=\"token operator\">+</span> src <span class=\"token operator\">+</span> <span class=\"token string\">' to '</span> <span class=\"token operator\">+</span> dst <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>disc<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>dom tree조회하기 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">walk_the_DOM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n          <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n          node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// getElmentsByAttribute 함수 정의 </span>\n  <span class=\"token comment\">// 이 함수는 attribute 이름과 일치하는 값을 인수로 받음 </span>\n  <span class=\"token comment\">// 이 함수는 node에서 attribute 이름을 찾는 함수를 전달하면서 </span>\n  <span class=\"token comment\">// walk_the_DOM을 호출 </span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getElementsByAttribute</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">att<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n      <span class=\"token function\">walk_the_DOM</span><span class=\"token punctuation\">(</span>doucment<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> actual <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>att<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actual <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> \n             <span class=\"token punctuation\">(</span>actual <span class=\"token operator\">===</span> value <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                 results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>꼬리재귀를 하는 계승 함수\n( 현재는 꼬리 재귀 최적화를 제공하므로 다음 코드는 반환스택의 과다 사용으로 실행이 제한되는 일은 없음)\n( 꼬리 재귀일 경우 솓고를 매우 빠르게 향상시키는 반복 실행으로 대체함 )</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">factorial</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> a <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>유효범위</h3>\n<p>자바스크립트는 블록 유효범위가 아닌 함수 유효범위</p>\n<p>대부분의 언어에서는 변수를 가능한 늦게 즉 처음 사용하기 바로 전에 선언해서 사용할 것을 권하고 있습니다. </p>\n<h3>클로져</h3>\n<p>방금 getElementsByAttribute 함수에서 내부 walk<em>the</em>DOM에 넘겨준 함수에서 result 라는 변수를 접근하고 있다.\n내부 함수가 외부 함수보다 더 오래 유지될때가 흥미롭다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">quo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function-variable function\">get_status</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>get_status는 status 그 자체에 대한 접근 권한을 갖습니다.\n함수가 자신이 생성된 함수, 즉 자신을 내포하는 함수의 문맥에 접근할 수 있기 때문이다.\n이를 클로져라고 부릅니다. </p>\n<p>유용한 클로져 예제 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fade</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> level <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">step</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">var</span> hex <span class=\"token operator\">=</span> level<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        node<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'#FFFF'</span><span class=\"token operator\">+</span> hex <span class=\"token operator\">+</span> hex<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> level <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            level <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>내부 함수가 외부 함수에 있는 변수의 복사본이 아니라 실제 변수에 접근한다는 것을 이해해야 합니다. </p>\n<p>잘못된 클로져 예제 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add_the_handlers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> i <span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// function(i){ return function(e){ alert(i); }; }(i);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 모두 같은 i를 alert하게 된다. </span></code></pre></div>\n<h3>콜백</h3>\n<p>함수는 비 연속적인 이벤트를 다루는 것을 좀 더 쉽게 처리할 수 있는 방법을 제공합니다.\n비동기식 처리를 할때 콜백 함수를 넘겨줄 수 있습니다.</p>\n<h3>모듈</h3>\n<p>함수와 클로저를 사용해서 모듈을 만들 수 있습니다. 모듈은 내부의 상태나 내용은 숨기고\n인터페이스만 제공하는 함수나 객체입니다. 모듈을 만들기 위해 함수를 사용한다면\n전역변수 사용을 거의 대부분 제거할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 모듈화 패턴으로 </span>\n<span class=\"token comment\">// 매번, HTML 엔티티를 저장한 객체를 객체화하는 비용을 최소화 할 수 있다. </span>\n\n<span class=\"token comment\">// 모듈 패턴을 사용하면 전역변수의 사용을 없앨 수 있다. </span>\n\nString<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deentityfy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> entity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n        quot <span class=\"token operator\">:</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> \n        lt <span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span> \n        gt<span class=\"token operator\">:</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&amp;([^&amp;;]+);/g</span> <span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n                <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> r <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> r <span class=\"token operator\">:</span> a<span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>안전한 객체 만들기 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">serial_maker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">var</span> seq <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function-variable function\">seq_prefix</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            prefix <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n        \n        <span class=\"token function-variable function\">set_seq</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            seq <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">getsym</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> seq<span class=\"token punctuation\">;</span> \n            seq <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>serial_maker를 통해 생성된 객체는 해당 변수를 다루도록 정의된 메소드를 제외하고는\nprefix나 seq의 값을 얻거나 방법이 없습니다. </p>\n<h3>연속 호출</h3>\n<p>연속 호출을 사용하면 같은 객체에 대해 문장 하나로 연속되는 많은 메소드를 호출할 수 있습니다. </p>\n<h3>커링 (curry)</h3>\n<p>함수와 인수를 결합하여 새로운 함수를 만들 수 있게 합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Function<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'curry'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">,</span> \n        args <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> add1 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8 </span></code></pre></div>\n<h3>메모이제이션</h3>\n<p>함수는 불필요한 작업을 피하기 위해 이전에 연산한 결과를 저장하고 있습니다.\n이러한 최적화 기법을 memoization이라고 합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">memoizer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">memo<span class=\"token punctuation\">,</span> fundamental</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">shell</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n            result <span class=\"token operator\">=</span> <span class=\"token function\">fundamental</span><span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span>  result<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> shell \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// fibonacci </span>\n<span class=\"token keyword\">var</span> fibonacci <span class=\"token operator\">=</span> <span class=\"token function\">memoizer</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shell<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"4 - 함수","date":null,"description":null}}},"pageContext":{"slug":"/JS/theGoodParts/5/","previous":{"fields":{"slug":"/FP/FPinJS/5/"},"frontmatter":{"title":"CHAPTER 4 - 재사용 가능한, 모듈적인 코드로"}},"next":{"fields":{"slug":"/HTML/HTML5fWD/6/"},"frontmatter":{"title":"CHAPTER 5 - HTML 의미론"}}}}}