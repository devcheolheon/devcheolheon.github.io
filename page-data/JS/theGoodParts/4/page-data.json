{"componentChunkName":"component---src-templates-blog-post-js","path":"/JS/theGoodParts/4/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"77026551-d0ac-5983-bff1-98354dc359df","excerpt":"객체 자바스크립트에서는 배열, 함수, 정규 표현식등과 객체 모두가 객체 이름과 값이 있는 속성들을 포함하는 컨테이너 \n(속성의 값은 undefined…","html":"<h3>객체</h3>\n<p>자바스크립트에서는 배열, 함수, 정규 표현식등과 객체 모두가 객체</p>\n<p>이름과 값이 있는 속성들을 포함하는 컨테이너\n(속성의 값은 undefined를 제외한 모든 값이 될 수 있다.)</p>\n<p>자바스크립트의 객체는 클래스가 필요없다. </p>\n<h3>속성값 읽기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> stooge<span class=\"token punctuation\">[</span><span class=\"token string\">\"first-name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n flight<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">.</span><span class=\"token constant\">IATA</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본값 지정하기 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> middle <span class=\"token operator\">=</span> stooge<span class=\"token punctuation\">[</span><span class=\"token string\">\"middle-name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"(none)\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// undefined인 경우 기본값으로 \"(none)</span></code></pre></div>\n<p>존재하지 않는 속성을 참조하려 할때 에러 방지하기 (TypeError)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  flight<span class=\"token punctuation\">.</span>equipment <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>equipment<span class=\"token punctuation\">.</span>model\n  <span class=\"token comment\">// undefined인 경우 기본값으로 \"(none)</span></code></pre></div>\n<h3>속성값의 갱신</h3>\n<p>해당 속성이 객체 안에 존재하면 해당 속성의 값을 교체함\n해당 속성이 객체 안에 존재하지 않는 경우 해당 속성을 객체에 추가함</p>\n<h3>참조</h3>\n<p>객체는 참조 방식으로 전달 됩니다. </p>\n<h3>프로토타입 (Prototype)</h3>\n<p>여기서 소개된 create은 es5에서 Object의 기본 메서드로 추가됨\n(MDN)[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create]</p>\n<p>모든 객체는 속성을 상속하는 프로토타입 객체에 연결되어 있다.\n객체 리터럴로 생성된 객체는 Object.prototype 객체에 연결되어 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">F</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프로토타입 연결은 값의 갱신에 영향을 받지 않습니다. 객체를 변경하더라도 객체의 프로토타입에는 영향을 미치지 않습니다.\n프로토타입 연결은 오로지 객체의 속성을 읽을때만 사용합니다.  </p>\n<p>속성 값을 찾을때까지 프로토타입 체인의 끝까지 거슬러 올라가게 되는데 이러한 일련의 내부 동작을\n위임(delegation)이라고 합니다. </p>\n<p>프로토타입 관계는 동적 관계, 프로토 타입에 새로운 속성이 추가될 경우 해당 프로토타입과 연결된 객체는\n바로 영향을 받습니다. </p>\n<h3>리플렉션</h3>\n<p>typeof 연산자를 활용하면 속성의 타입을 살펴볼 수 있습니다. </p>\n<h3>열거</h3>\n<p>함수나 프로토타입내 속성을 제외한 객체의 속성을 모두 열거하기 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>nmae <span class=\"token keyword\">in</span> stooge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">typeof</span> stooge<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' : '</span> <span class=\"token operator\">+</span> stooge<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>속성이 열거되기 원하는 순서를 특정 배열로 지정하고 이 배열을 이용하여 객체의 속성을 열거할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> i <span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">var</span> properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'first-name'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'middle-name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'last-name'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'profession'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> properties<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stooge<span class=\"token punctuation\">[</span>properties<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>삭제</h3>\n<p>해당 속성이 객체에 있을 경우 삭제한다.\n프로토 타입 연결 상에 있는 객체들은 접근하지 않는다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">delete</span> stooge<span class=\"token punctuation\">.</span>nickname</code></pre></div>\n<h3>최소한의 전역변수 사용</h3>\n<p>전역변수를 위한 객체를 하나 만들고, 이 변수를 전역변수를 위한 컨테이너로 활용하는\n방법이 있다. </p>","frontmatter":{"title":"3 - 객체","date":null,"description":null}}},"pageContext":{"slug":"/JS/theGoodParts/4/","previous":{"fields":{"slug":"/FP/FPinJS/4/"},"frontmatter":{"title":"CHAPTER 3 - 자료구조는 적게, 일은 더 많이"}},"next":{"fields":{"slug":"/FP/FPinJS/5/"},"frontmatter":{"title":"CHAPTER 4 - 재사용 가능한, 모듈적인 코드로"}}}}}