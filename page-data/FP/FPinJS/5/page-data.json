{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/FPinJS/5/","result":{"data":{"site":{"siteMetadata":{"title":"DEV LOGS"}},"markdownRemark":{"id":"46c9a6cd-23e2-5d12-a1af-58574ad47342","excerpt":"모듈성, 파이프 라인, 커링, (부분적용), 함수 조합기 모듈성 modularity…","html":"<p>모듈성, 파이프 라인, 커링, (부분적용), 함수 조합기</p>\n<h3>모듈성</h3>\n<p>modularity 는 프로그램을 더 작고 독립적인 부분으로 나눌 수 있는 정도를 뜻합니다.</p>\n<h3>파이프 라인</h3>\n<p>파이프라인이란 한 함수의 출력이 다음 함수의 입력이 되게끔 느슨하게 배열한, 방향성 함수 순차열입니다.\n함수 입출력을 서로 연결지어 느슨하게 결합된 컴포넌트를 만듭니다\n함수형 프로그래밍에서는 파이프라인이 프로그램을 구축하는 유일한 수단입니다.\n각 함수는 두가지 측면에서 입력과 출력이 서로 호환돼야 합니다.</p>\n<ul>\n<li>형식 : 한 함수의 반환 형식과 수신함수의 인수 형식이 일치해야 합니다.</li>\n<li>항수 : 수신 함수는 앞 단계 함수가 반환한 값을 처리하기 위해 적어도 하나 이상의 매개 변수를 선언해야 합니다</li>\n</ul>\n<h3>currying</h3>\n<p>currying 은 다 변수 함수가 인수를 전부 받을때까지 실행을 보류, 지연시켜 단계별로 나뉜 단항함수의 순차열로 전환하는 기법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstArg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">secondArg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>firstarg<span class=\"token punctuation\">,</span>secondArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>커링의 대용품인 부분적용, 매개변수 바인딩은 자바스크립트에서도 어느정도 지원되는 기법입니다. </p>\n<h3>currying vs 부분적용</h3>\n<p>커링 : 부분 호출 할때마다 단항함수를 중첩 생성하며, 내부적으로는 이를 단계별로 합성하여 최종 결과를 냅니다.\n여러 인수를 부분 평가하는 식으로도 변용할 수 있어서 개발자가 평가 시점과 방법을 좌지우지 할 수 있습니다.</p>\n<p>부분 적용 : 함수인수를 미리 정의된 값으로 묶은 후 인수가 적은 함수를 새로 만듭니다.\n함수는 자신의 클로져에 고정된 매개변수를 갖고 있으며, 후속 호출 시 이미 형가를 마친 상태 입니다.</p>\n<p>(커링은 부분 적용을 자동화했다.)</p>\n<blockquote>\n<p>예) setTimeout에는 this레퍼런스는 전역 콘택스트인 window객체를 가르켜야 별탈 없이 잘 작동합니다.\nsetTimeout을 만약에 객체의 메서드로 실행하려고 한다면 이를 참고해야 한다. </p>\n</blockquote>\n<h3>함수 합성</h3>\n<p>함수 합성이란 복잡한 작업을 한데 묶어 간단한 작업으로 쪼개는 과정입니다</p>\n<p>함수 합성의 예.. </p>\n<ul>\n<li>\n<p>ramda js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> grades <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>// zip : 인접한 배열 원소끼리 짝지어 새로운 배열을 만듭니다.\n// R.prop : 정렬할 값을 정합니다.\n// R.sortBy : 주어진 속성을 기본 오름차순으로 정렬\n// R.reverse : 배열을 거꾸로 뒤집으면 첫번째 원소가 최고 득점\n// R.plunk : 주어진 인덱스에 위치한 원소를 추출해서 새 배열을 만듭니다. (0) = > 학생 이름\n// R.head : 첫번째 원소를 얻습니다.</p>\n<p>const smartestStudent = R.compose(\nR.head,\nR.pluck(0),\nR.reverse,\nR.sortBy(R.prop(1)),\nR.zip)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 함수 조합기 function combinator\n\n기본 장치를 조함하여 제어 로직처럼 작동할 수 있는 고계함수입니다\n\n- 항등 identity\n- 탭 tap\n- 선택 alternation\n- 순차열 sequence\n- 포트 또는 조인 fork, join</code></pre></div>","frontmatter":{"title":"CHAPTER 4 - 재사용 가능한, 모듈적인 코드로","date":null,"description":null}}},"pageContext":{"slug":"/FP/FPinJS/5/","previous":{"fields":{"slug":"/javascript/thegoodparts/README/"},"frontmatter":{"title":""}},"next":{"fields":{"slug":"/javascript/DataSturcture/readme/"},"frontmatter":{"title":"읽은 책 제목"}}}}}